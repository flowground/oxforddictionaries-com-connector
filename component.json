{
    "title": "Oxford Dictionaries",
    "docsUrl": "",
    "url": "https://api.apis.guru/v2/specs/oxforddictionaries.com/1.11.0/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://od-api-demo.oxforddictionaries.com:443/api/v1",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "get_domains__source_domains_language___target_domains_language_": {
            "main": "./lib/actions/get_domains__source_domains_language___target_domains_language_.js",
            "title": "Lists available domains in a bilingual dataset",
            "description": "Returns a list of the available [domains](documentation/glossary?term=domain) for a given bilingual language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_domains__source_domains_language___target_domains_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_domains__source_language_": {
            "main": "./lib/actions/get_domains__source_language_.js",
            "title": "Lists available domains in a monolingual dataset",
            "description": "Returns a list of the available [domains](documentation/glossary?term=domain) for a given monolingual language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_domains__source_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_language___word_id__sentences": {
            "main": "./lib/actions/get_entries__source_language___word_id__sentences.js",
            "title": "Retrieve corpus sentences for a given word",
            "description": "\nUse this to retrieve sentences extracted from  corpora which show how a word is used in the language. This is available for English and Spanish. For English, the sentences are linked to the correct [sense](documentation/glossary?term=sense) of the word in the dictionary. In Spanish, they are linked at the [headword](documentation/glossary?term=headword) level.\n  <div id=\"sentences\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_language___word_id__sentences.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_lang___word_id_": {
            "main": "./lib/actions/get_entries__source_lang___word_id_.js",
            "title": "Retrieve dictionary information for a given word",
            "description": "\nUse this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology). It only works for dictionary [headwords](documentation/glossary?term=headword), so you may need to use the [Lemmatron](documentation/glossary?term=lemma) first if your input is likely to be an [inflected](documentation/glossary?term=inflection) form (e.g., 'swimming'). This would return the linked [headword](documentation/glossary?term=headword) (e.g., 'swim') which you can then use in the Entries endpoint. Unless specified using a region filter, the default lookup will be the Oxford Dictionary of English (GB). \n  <div id=\"dictionary_entries\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_lang___word_id_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_lang___word_id__antonyms": {
            "main": "./lib/actions/get_entries__source_lang___word_id__antonyms.js",
            "title": "Retrieve words that mean the opposite",
            "description": "\nRetrieve words that are opposite in meaning to the input word ([antonym](documentation/glossary?term=thesaurus)).\n\n  <div id=\"antonyms\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_lang___word_id__antonyms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_lang___word_id__regions__region_": {
            "main": "./lib/actions/get_entries__source_lang___word_id__regions__region_.js",
            "title": "Specify GB or US dictionary for English entry search",
            "description": "\nUSe this filter to restrict the lookup to either our Oxford Dictionary of English (GB) or New Oxford American Dictionary (US).\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_lang___word_id__regions__region_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_lang___word_id__synonyms": {
            "main": "./lib/actions/get_entries__source_lang___word_id__synonyms.js",
            "title": "Retrieve words that are similar",
            "description": "\nUse this to retrieve words that are similar in meaning to the input word ([synonym](documentation/glossary?term=synonym)).\n\n  <div id=\"synonyms\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_lang___word_id__synonyms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_lang___word_id__synonyms_antonyms": {
            "main": "./lib/actions/get_entries__source_lang___word_id__synonyms_antonyms.js",
            "title": "Retrieve synonyms and antonyms for a given word",
            "description": "\nRetrieve available [synonyms](documentation/glossary?term=thesaurus) and [antonyms](documentation/glossary?term=thesaurus) for a given word and language. \n\n  <div id=\"synonyms_and_antonyms\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_lang___word_id__synonyms_antonyms.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_lang___word_id___filters_": {
            "main": "./lib/actions/get_entries__source_lang___word_id___filters_.js",
            "title": "Apply filters to response",
            "description": "\nUse filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using '='. For example 'grammaticalFeatures=singular'. Filters can also be combined using a semicolon.\n\n  <div id=\"dictionary_entries_filters\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_lang___word_id___filters_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_entries__source_translation_language___word_id__translations__target_translation_language_": {
            "main": "./lib/actions/get_entries__source_translation_language___word_id__translations__target_translation_language_.js",
            "title": "Retrieve translation for a given word",
            "description": "\nUse this to return translations for a given word. In the event that a word in the dataset does not have a direct translation, the response will be a [definition](documentation/glossary?term=entry) in the target language.\n\n  <div id=\"translation\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_entries__source_translation_language___word_id__translations__target_translation_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_filters": {
            "main": "./lib/actions/get_filters.js",
            "title": "Lists available filters",
            "description": "Returns a list of all the valid filters to construct API calls.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_filters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_filters__endpoint_": {
            "main": "./lib/actions/get_filters__endpoint_.js",
            "title": "Lists available filters for specific endpoint",
            "description": "Returns a list of all the valid filters for a given endpoint to construct API calls.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_filters__endpoint_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_grammaticalFeatures__source_language_": {
            "main": "./lib/actions/get_grammaticalFeatures__source_language_.js",
            "title": "Lists available grammatical features in a dataset",
            "description": "Returns a list of the available [grammatical features](documentation/glossary?term=grammaticalfeatures) for a given language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_grammaticalFeatures__source_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_inflections__source_lang___word_id_": {
            "main": "./lib/actions/get_inflections__source_lang___word_id_.js",
            "title": "Check a word exists in the dictionary and retrieve its root form",
            "description": "\nUse this to check if a word exists in the dictionary, or what 'root' form it links to (e.g., swimming > swim). The response tells you the possible [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) word. This can then be combined with other endpoints to retrieve more information.\n\n  <div id=\"lemmatron\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_inflections__source_lang___word_id_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_inflections__source_lang___word_id___filters_": {
            "main": "./lib/actions/get_inflections__source_lang___word_id___filters_.js",
            "title": "Apply optional filters to Lemmatron response",
            "description": "\nRetrieve available [lemmas](documentation/glossary?term=lemma) for a given [inflected](documentation/glossary?term=inflection) wordform. Filter results by categories.  \n\n  <div id=\"lemmatron_filters\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_inflections__source_lang___word_id___filters_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_languages": {
            "main": "./lib/actions/get_languages.js",
            "title": "Lists available dictionaries",
            "description": "Returns a list of monolingual and bilingual language datasets available in the API\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_languages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_lexicalcategories__language_": {
            "main": "./lib/actions/get_lexicalcategories__language_.js",
            "title": "Lists available lexical categories in a dataset",
            "description": "Returns a list of available [lexical categories](documentation/glossary?term=lexicalcategory) for a given language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_lexicalcategories__language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_regions__source_language_": {
            "main": "./lib/actions/get_regions__source_language_.js",
            "title": "Lists available regions in a monolingual dataset",
            "description": "Returns a list of the available [regions](documentation/glossary?term=regions) for a given monolingual language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_regions__source_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_registers__source_language_": {
            "main": "./lib/actions/get_registers__source_language_.js",
            "title": "Lists available registers in a  monolingual dataset",
            "description": "Returns a list of the available [registers](documentation/glossary?term=registers) for a given monolingual language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_registers__source_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_registers__source_register_language___target_register_language_": {
            "main": "./lib/actions/get_registers__source_register_language___target_register_language_.js",
            "title": "Lists available registers in a bilingual dataset",
            "description": "Returns a list of the available [registers](documentation/glossary?term=registers) for a given bilingual language dataset.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_registers__source_register_language___target_register_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_search__source_lang_": {
            "main": "./lib/actions/get_search__source_lang_.js",
            "title": "Retrieve possible matches to input",
            "description": "\nUse this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma) \n\n  <div id=\"search\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_search__source_lang_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_search__source_search_language__translations__target_search_language_": {
            "main": "./lib/actions/get_search__source_search_language__translations__target_search_language_.js",
            "title": "Retrieve possible translation matches to input",
            "description": "\nUse this to find matches in our translation dictionaries.\n\n  <div id=\"search_translation\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_search__source_search_language__translations__target_search_language_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_stats_frequency_ngrams__source_lang___corpus___ngram_size__": {
            "main": "./lib/actions/get_stats_frequency_ngrams__source_lang___corpus___ngram_size__.js",
            "title": "Retrieve the frequency of ngrams (1-4) derived from a corpus",
            "description": "This endpoint returns frequencies of ngrams of size 1-4. That is the number of times a word (ngram size = 1) or words (ngram size > 1) appear in the corpus. Ngrams are case sensitive (\"I AM\" and \"I am\" will have different frequency) and frequencies are calculated per word (true case) so \"the book\" and \"the books\" are two different ngrams. The results can be filtered based on query parameters. <br> <br> Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overridden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). <br> <br> Example for bigrams (ngram of size 2):\n* PATH: /tokens=a word,another word\n* GET: /?tokens=a word&tokens=another word\n* POST (json):\n\n  ```javascript\n    {\n        \"tokens\": [\"a word\", \"another word\"]\n    }\n  ```\n\nEither \"tokens\" or \"contains\" has to be provided. <br> <br> Some queries with \"contains\" or \"sort\" can exceed the 30s timeout, in which case the API will return an error message with status code 503. You mitigate this by providing additional restrictions such as \"minFrequency\" and \"maxFrequency\". <br> <br> You can use the parameters \"offset\" and \"limit\" to paginate through large result sets. For convenience, the HTTP header \"Link\" is set on the response to provide links to \"first\", \"self\", \"next\", \"prev\" and \"last\" pages of results (depending on the context). For example, if the result set contains 50 results and the parameter \"limit\" is set to 25, the Links header will contain an URL for the first 25 results and the next 25 results. <br> <br> Some libraries such as python's `requests` can parse the header automatically and offer a convenient way of iterating through the results. For example:\n```python def get_all_results(url):\n    while url:\n        r = requests.get(url)\n        r.raise_for_status()\n        for item in r.json()['results']:\n          yield item\n        url = r.links.get('next', {}).get('url')\n```\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_stats_frequency_ngrams__source_lang___corpus___ngram_size__.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_stats_frequency_word__source_lang__": {
            "main": "./lib/actions/get_stats_frequency_word__source_lang__.js",
            "title": "Retrieve the frequency of a word derived from a corpus.",
            "description": "This endpoint provides the frequency of a given word. When multiple database records match the query parameters, the returned frequency is the sum of the individual frequencies. For example, if the query parameters are lemma=test, the returned frequency will include the verb \"test\", the noun \"test\" and the adjective \"test\" in all forms (Test, tested, testing, etc.) <br> <br> If you are interested in the frequency of the word \"test\" but want to exclude other forms (e.g., tested) use the option trueCase=test. Normally, the word \"test\" will be spelt with a capital letter at the beginning of a sentence. The option trueCase will ignore this and it will count \"Test\" and \"test\" as the same token. If you are interested in frequencies of \"Test\" and \"test\", use the option wordform=test or wordform=Test. Note that trueCase is not just a lower case of the word as some words are genuinely spelt with a capital letter such as the word \"press\" in Oxford University Press. <br> <br> Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overriden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). Examples:\n* PATH: /lemma=test;lexicalCategory=noun\n* GET: /?lemma=test&lexicalCategory=noun\n* POST (json):\n\n  ```javascript\n    {\n      \"lemma\": \"test\",\n      \"lexicalCategory\": \"noun\"\n    }\n  ```\n\n<br> One of the options wordform/trueCase/lemma/lexicalCategory has to be provided.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_stats_frequency_word__source_lang__.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_stats_frequency_words__source_lang__": {
            "main": "./lib/actions/get_stats_frequency_words__source_lang__.js",
            "title": "Retrieve a list of frequencies of a word/words derived from a corpus.",
            "description": "This endpoint provides a list of frequencies for a given word or words. Unlike the /word/ endpoint, the results are split into the smallest units. <br> <br> To exclude a specific value, prepend it with the minus sign ('-'). For example, to get frequencies of the lemma 'happy' but exclude superlative forms (i.e., happiest) you could use options 'lemma=happy;grammaticalFeatures=-degreeType:superlative'. <br> <br> Parameters can be provided in PATH, GET or POST (form or json). The parameters in PATH are overridden by parameters in GET, POST and json (in that order). In PATH, individual options are separated by semicolon and values are separated by commas (where multiple values can be used). <br> <br> The parameters wordform/trueCase/lemma/lexicalCategory also exist in a plural form, taking a lists of items. Examples:\n* PATH: /wordforms=happy,happier,happiest\n* GET: /?wordforms=happy&wordforms=happier&wordforms=happiest\n* POST (json):\n```javascript\n  {\n    \"wordforms\": [\"happy\", \"happier\", \"happiest\"]\n  }\n```\nA mor complex example of retrieving frequencies of multiple lemmas:\n```\n  {\n      \"lemmas\": [\"happy\", \"content\", \"cheerful\", \"cheery\", \"merry\", \"joyful\", \"ecstatic\"],\n      \"grammaticalFeatures\": {\n          \"adjectiveFunctionType\": \"predicative\"\n      },\n      \"lexicalCategory\": \"adjective\",\n      \"sort\": [\"lemma\", \"-frequency\"]\n  }\n```\nSome queries with \"collate\" or \"sort\" can exceed the 30s timeout, in which case the API will return an error message with status code 503. You mitigate this by providing additional restrictions such as \"minFrequency\" and \"maxFrequency\". <br> <br> You can use the parameters \"offset\" and \"limit\" to paginate through large result sets. For convenience, the HTTP header \"Link\" is set on the response to provide links to \"first\", \"self\", \"next\", \"prev\" and \"last\" pages of results (depending on the context). For example, if the result set contains 50 results and the parameter \"limit\" is set to 25, the Links header will contain an URL for the first 25 results and the next 25 results. <br> <br> Some libraries such as python's `requests` can parse the header automatically and offer a convenient way of iterating through the results. For example:\n```python def get_all_results(url):\n    while url:\n        r = requests.get(url)\n        r.raise_for_status()\n        for item in r.json()['results']:\n          yield item\n        url = r.links.get('next', {}).get('url')\n```\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_stats_frequency_words__source_lang__.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_wordlist__source_lang___filters_advanced_": {
            "main": "./lib/actions/get_wordlist__source_lang___filters_advanced_.js",
            "title": "Retrieve list of words for category with advanced options",
            "description": "Use this to apply more complex filters to the [list of words](documentation/glossary?term=wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term=sense) match the filter, or only its 'prime sense'. You can also filter by word length or match by substring (prefix). \n\n  <div id=\"wordlist_advanced\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_wordlist__source_lang___filters_advanced_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_wordlist__source_lang___filters_basic_": {
            "main": "./lib/actions/get_wordlist__source_lang___filters_basic_.js",
            "title": "Retrieve a list of words in a category",
            "description": "\nUse this to retrieve a [list of words](documentation/glossary?term=wordlist) for particular [domain](documentation/glossary?term=domain), [lexical category](documentation/glossary?term=lexicalcategory), [register](documentation/glossary?term=registers) and/or [region](documentation/glossary?term=regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term=headword), not all their possible [inflections](documentation/glossary?term=inflection). If you require a full [wordlist](documentation/glossary?term=wordlist) including [inflected forms](documentation/glossary?term=inflection), contact us and we can help.\n\n  <div id=\"wordlist\"></div>\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_wordlist__source_lang___filters_basic_.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}